#include <Python.h>
#include <iostream>
#include <Windows.h>
#include <cmath>
#include <string>
#include <fstream>

using namespace std;

/*
Description:
	To call this function, simply pass the function name in Python that you wish to call.
Example:
	callProcedure("printsomething");
Output:
	Python will print on the screen: Hello from python!
Return:
	None
*/
void CallProcedure(string pName)
{
	char* procname = new char[pName.length() + 1];
	std::strcpy(procname, pName.c_str());

	Py_Initialize();
	PyObject* my_module = PyImport_ImportModule("main");
	PyErr_Print();
	PyObject* my_function = PyObject_GetAttrString(my_module, procname);
	PyObject* my_result = PyObject_CallObject(my_function, NULL);
	Py_Finalize();

	delete[] procname;
}

/*
Description:
	To call this function, pass the name of the Python functino you wish to call and the string parameter you want to send
Example:
	int x = callIntFunc("PrintMe","Test");
Output:
	Python will print on the screen:
		You sent me: Test
Return:
	100 is returned to the C++
*/
int callIntFunc(string proc, string param)
{
	char* procname = new char[proc.length() + 1];
	std::strcpy(procname, proc.c_str());

	char* paramval = new char[param.length() + 1];
	std::strcpy(paramval, param.c_str());


	PyObject* pName, * pModule, * pDict, * pFunc, * pValue = nullptr, * presult = nullptr;
	// Initialize the Python Interpreter
	Py_Initialize();
	// Build the name object
	pName = PyUnicode_FromString((char*)"main");
	// Load the module object
	pModule = PyImport_Import(pName);
	// pDict is a borrowed reference 
	pDict = PyModule_GetDict(pModule);
	// pFunc is also a borrowed reference 
	pFunc = PyDict_GetItemString(pDict, procname);
	if (PyCallable_Check(pFunc))
	{
		pValue = Py_BuildValue("(z)", paramval);
		PyErr_Print();
		presult = PyObject_CallObject(pFunc, pValue);
		PyErr_Print();
	}
	else
	{
		PyErr_Print();
	}
	//printf("Result is %d\n", _PyLong_AsInt(presult));
	Py_DECREF(pValue);
	// Clean up
	Py_DECREF(pModule);
	Py_DECREF(pName);
	// Finish the Python Interpreter
	Py_Finalize();

	// clean 
	delete[] procname;
	delete[] paramval;


	return _PyLong_AsInt(presult);
}

/*
Description:
	To call this function, pass the name of the Python functino you wish to call and the string parameter you want to send
Example:
	int x = callIntFunc("doublevalue",5);
Return:
	25 is returned to the C++
*/
int callIntFunc(string proc, int param)
{
	char* procname = new char[proc.length() + 1];
	std::strcpy(procname, proc.c_str());

	PyObject* pName, * pModule, * pDict, * pFunc, * pValue = nullptr, * presult = nullptr;
	// Initialize the Python Interpreter
	Py_Initialize();
	// Build the name object
	pName = PyUnicode_FromString((char*)"main");
	// Load the module object
	pModule = PyImport_Import(pName);
	// pDict is a borrowed reference 
	pDict = PyModule_GetDict(pModule);
	// pFunc is also a borrowed reference 
	pFunc = PyDict_GetItemString(pDict, procname);
	if (PyCallable_Check(pFunc))
	{
		pValue = Py_BuildValue("(i)", param);
		PyErr_Print();
		presult = PyObject_CallObject(pFunc, pValue);
		PyErr_Print();
	}
	else
	{
		PyErr_Print();
	}
	//printf("Result is %d\n", _PyLong_AsInt(presult));
	Py_DECREF(pValue);
	// Clean up
	Py_DECREF(pModule);
	Py_DECREF(pName);
	// Finish the Python Interpreter
	Py_Finalize();

	// clean 
	delete[] procname;

	return _PyLong_AsInt(presult);
}

// Display the selection menu
void DisplayMenu() {
	cout << "\nPlease select an option:\n" << endl;
	cout << "1. Track all item frequencies" << endl;
	cout << "2. Track specific item" << endl;
	cout << "3. Create histogram" << endl;
	cout << "4. Exit program" << endl;
}

// Validate the user's selection
bool ValidateMenuSelection(int menuSelection) {
	// We use a switch case to check for all possible values

	// It returns TRUE if the user's selection is valid
	// Returns FALSE if the selection is in no cases (invalid)
	switch (menuSelection) {
	case 1:
		return true;
	case 2:
		return true;
	case 3:
		return true;
	case 4:
		return true;
	default:
		return false;
	}
}

// Reads the frequency file generated by Python
void ReadFrequencyFile() {
	// Create our input stream and open the file
	ifstream frequencyFile;
	frequencyFile.open("./frequency.dat", ios::in);

	// If the file is opened successfully, we continue
	if (frequencyFile.is_open()) {
		string buffer; // This is our buffer which stores our line temporarily

		// While there is a line of text to get from the input file, we
		// loop through each line of the text file
		while (getline(frequencyFile, buffer)) {
			// This separates the item from the number purchased and
			// stores them in two variables which we use later
			string item = buffer.substr(0, buffer.find(" "));
			int amount = stoi(buffer.substr(buffer.find(" ")));
			
			// Display the item name followed by a space
			cout << item << " ";

			// A small for loop to repeat the asterisk the number of times
			// the item was purchased, since this is a histogram
			for (int i = 1; i <= amount; i++) {
				cout << "*";
			}

			// New line to end the line
			cout << endl;
		}

		// We close the file, because it's good practice
		frequencyFile.close();
	}
}

// Handle the user selection
void HandleUserSelection(int userSelection) {
	string desiredItem; // This variable stores the desired selection from the user

	// We use a switch case to test each valid value for a selection and
	// execute the appropriate methods based on that
	switch (userSelection) {
	case 1:
		// We call a Python function here to display all items and their frequencies
		cout << "\n----| Items |----" << endl;
		CallProcedure("AllItemsFrequency");
		break;
	case 2:
		// We gather which item the user wants to search for
		cout << "\nEnter an item name: ";
		cin >> desiredItem;

		// We call a Python function which returns the number of times
		// the desired item has been purchased
		cout << "\n" << desiredItem << " - " << callIntFunc("ItemFrequency", desiredItem) << endl;
		break;
	case 3:
		// Here we call a Python function to write a file
		// which contains all the items and their frequencies separated
		// by a space
		CallProcedure("WriteFrequencyFile");

		// We then call our C++ function which reads this file
		// and displays a histogram based on the parsed data
		ReadFrequencyFile();
		break;
	case 4:
		// End program
		break;
	}
}

int main()
{
	//CallProcedure("printsomething");
	//cout << callIntFunc("PrintMe", "House") << endl;
	//cout << callIntFunc("SquareValue", 2);

	// Display the menu initially
	DisplayMenu();

	// Variable to store the user's menu selection
	// Ask the user for their selection
	int menuSelection;
	cout << "\nSelection: ";
	cin >> menuSelection;
	cout << endl;

	// If the user enters an invalid selection, warn them,
	// display the menu, and ask for input again. Repeat until
	// a valid selection is entered
	while (ValidateMenuSelection(menuSelection) != 1) {
		cout << "\nPlease enter a valid selection!" << endl;

		DisplayMenu();

		cout << "\nSelection: ";
		cin >> menuSelection;
		cout << endl;
	}

	// Once the user enters a valid selection, we handle the input
	// (We act accordingly and execute the desired action)
	HandleUserSelection(menuSelection);

	return 0;
}